#!/bin/bash

# File:        debmake
# Author:      Sven Mäder <maeder@phys.ethz.ch>, ETH Zurich, ISG D-PHYS
# Date:        2018-06-26
# Gitlab:      https://gitlab.phys.ethz.ch/core/debmake.git
#
# Description: Creates a basic debian package from a directory or from a git
#              repository. Configuration is done with a file `.debmake` placed
#              in the root directory, containing the variables below.
#
# Variables:   TARGET              Installation path (without leading `/`)
#              VERSION             Version number (default: `1.0`)
#              HOMEPAGE            Source of the software
#              DESCRIPTION_SHORT   Use max. 80 characters
#              DESCRIPTION_LONG    Automatically broken at 80 characters
#
# Optional:    SECTION             Default: `misc`
#              DEPENDS             Comma separated lists of packages
#              RECOMMENDS          ...
#              SUGGESTS
#              ENHANCES
#              PREDEPENDS
#              CONFLICTS
#              BREAKS
#              PROVIDES
#              REPLACES
#              COPYRIGHT           Copyright information
#              LICENSE             License short form
#              LICENSE_TEXT        License text
#              DOC                 Space separated list of doc files
#
# Requirement: `debuild`, provided by the package devscripts, on debian
#              based distributions run the following command to install it:
#
#              apt install devscripts
#
# Copyright 2018 Sven Mäder <maeder@phys.ethz.ch>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

SCRIPT="$(basename ${0})"

print_usage() { 
  echo -e "Usage: ${SCRIPT} [repo] package dist"
  echo -e "\n    Creates a basic deb package."
  echo -e "\nOptions:\n"
  echo "    repo"
  echo "        GIT repo to clone from"
  echo "    package"
  echo "        Directory to package (package name)"
  echo "    dist"
  echo "        Distribution codename"
}

if [ "$#" -lt 2 ] || [ "$#" -gt 3 ]; then
  print_usage
  exit 1
fi

if [ "${DEBEMAIL}" == "" ] || [ "${DEBFULLNAME}" == "" ]; then
  echo "required env vars are not set, for example do:"
  echo "  export DEBEMAIL=\"you@mail.ch\""
  echo "  export DEBFULLNAME=\"Your Name\""
  exit 1
fi

if [ "$#" -eq 3 ]; then
  REPO="${1}"
  PACKAGE="${2}"
  DIST="${3}"
  if [ ! -e "${PACKAGE}" ]; then
    echo "${SCRIPT}: cloning ${REPO} to ${PACKAGE}"
    git clone "${REPO}" "${PACKAGE}"
  else
    echo "${SCRIPT}: target does already exist"
    exit 1
  fi
else
  PACKAGE="${1}"
  DIST="${2}"
fi

if [ -f "${PACKAGE}/.debmake" ]; then
  . "${PACKAGE}/.debmake"
else
  echo "${SCRIPT}: configuration file ${PACKAGE}/.debmake not found"
  exit 1
fi

if [ "${VERSION}" == "" ]; then
  VERSION="1.0"
fi

if [ "${DOC}" == "" ]; then
  DOC="README README.md README.markdown README.txt LICENSE LICENSE.txt COPYRIGHT COPYRIGHT.txt COPYING COPYING.txt"
fi

DIR="${PACKAGE}-${VERSION}"
TAR="${PACKAGE}_${VERSION}.orig.tar.gz"
DEBIAN="${DIR}/debian"
DATE="$(date '+%a, %d %b %Y %T %z')"
YEAR="$(date '+%Y')"
DOCTARGET="usr/share/doc/${PACKAGE}"

if [ "${DEPENDS}" != "" ]; then
  DEPENDS=", ${DEPENDS}"
fi

if [ "${SECTION}" == "" ]; then
  SECTION="misc"
fi

if [ ! -e "${PACKAGE}" ]; then
  echo "${SCRIPT}: target does not exist"
  exit 1
fi

if [ -e "${DIR}" ]; then
  echo "${SCRIPT}: package directory ${DIR} does already exist"
  exit 1
fi

if [ -e "${TAR}" ]; then
  echo "${SCRIPT}: original archive ${TAR} does already exist"
  exit 1
fi

if [[ ${TARGET} == /* ]]; then
  echo "${SCRIPT}: target starts with a \`/\`, please omit leading \`/\`"
  exit 1
fi

echo "${SCRIPT}: renaming ${PACKAGE} to ${DIR}"
mv "${PACKAGE}" "${DIR}"

echo "${SCRIPT}: creating original archive ${TAR}"
tar --exclude='.git' -czf "${TAR}" "${DIR}"

echo "${SCRIPT}: creating debian ${DEBIAN} and ${DEBIAN}/source directories"
mkdir -p "${DEBIAN}/source"

if [ -f "${DIR}/.debmake.changelog" ]; then
    RELEASE_TEXT="New upstream release"
else
    RELEASE_TEXT="Initial release"
fi

echo "${SCRIPT}: creating ${DEBIAN}/changelog"
cat > "${DEBIAN}/changelog" << EOF
${PACKAGE} (${VERSION}-1) ${DIST}; urgency=medium

  * ${RELEASE_TEXT}.

 -- ${DEBFULLNAME} <${DEBEMAIL}>  ${DATE}
EOF

if [ -f "${DIR}/.debmake.changelog" ]; then
    echo >> "${DEBIAN}/changelog"
    cat "${DIR}/.debmake.changelog" >> "${DEBIAN}/changelog"
fi

echo "${SCRIPT}: creating ${DEBIAN}/compat"
cat > "${DEBIAN}/compat" << EOF
10
EOF

echo "${SCRIPT}: creating ${DEBIAN}/control"
cat > "${DEBIAN}/control" << EOF
Source: ${PACKAGE}
Section: ${SECTION}
Priority: optional
Maintainer: ${DEBFULLNAME} <${DEBEMAIL}>
Build-Depends: debhelper (>= 10)
Standards-Version: 4.1.2
Homepage: ${HOMEPAGE}

Package: ${PACKAGE}
Architecture: any
Depends: \${misc:Depends}${DEPENDS}
Recommends: ${RECOMMENDS}
Suggests: ${SUGGESTS}
Enhances: ${ENHANCES}
Pre-Depends: ${PREDEPENDS}
Conflicts: ${CONFLICTS}
Breaks: ${BREAKS}
Provides: ${PROVIDES}
Replaces: ${REPLACES}
Description: ${DESCRIPTION_SHORT}
EOF

printf "${DESCRIPTION_LONG}" | fold -sw 80 | sed 's/^/ /' >> "${DEBIAN}/control"

echo "${SCRIPT}: creating ${DEBIAN}/source/options"
cat > "${DEBIAN}/source/options" << EOF
tar-ignore = ".git/*"
EOF

echo "${SCRIPT}: creating ${DEBIAN}/source/format"
cat > "${DEBIAN}/source/format" << EOF
3.0 (quilt)
EOF

echo "${SCRIPT}: creating ${DEBIAN}/rules"
cat > "${DEBIAN}/rules" << 'EOF'
#!/usr/bin/make -f

%:
	dh $@
EOF

chmod +x "${DEBIAN}/rules"

echo "${SCRIPT}: creating ${DEBIAN}/${PACKAGE}.links"
cat > "${DEBIAN}/${PACKAGE}.links" << EOF
# Add links to be created here, example:
# /target/path /link/path

EOF

echo "${SCRIPT}: creating ${DEBIAN}/dirs"
cat > "${DEBIAN}/dirs" << EOF
# Add directories to create here (without leading /)

${TARGET}
EOF

echo "${SCRIPT}: creating ${DEBIAN}/install"
cat > "${DEBIAN}/install" << EOF
# Add files/directories to install here (without leading /), example:
# file.txt ${TARGET}
# dir/ ${TARGET}

EOF

for path in ${DIR}/*; do
  file="$(basename ${path})"
  isdoc=0
  for docfile in ${DOC}; do
    if [ "${docfile}" == "${file}" ]; then
      isdoc=1
    fi
  done
  if [ "${file}" != "debian" ]; then
    if [ ${isdoc} -eq 1 ]; then
      echo "${SCRIPT}: install doc ${file}"
      echo "${file} ${DOCTARGET}" >> "${DEBIAN}/install"
    else
      echo "${SCRIPT}: install ${file}"
      echo "${file} ${TARGET}" >> "${DEBIAN}/install"
    fi
  fi
done

for path in ${DIR}/.*; do
  file="$(basename ${path})"
  isdoc=0
  for docfile in ${DOC}; do
    if [ "${docfile}" == "${file}" ]; then
      isdoc=1
    fi
  done
  if [ "${file}" != "." ] && [ "${file}" != ".." ] && [ "${file}" != ".git" ] && [ "${file}" != ".gitignore" ] && [ "${file}" != ".debmake" ] && [ "${file}" != ".debmake.changelog" ] && [ "${file}" != ".debmake.postinst" ]; then
    if [ ${isdoc} -eq 1 ]; then
      echo "${SCRIPT}: install doc ${file}"
      echo "${file} ${DOCTARGET}" >> "${DEBIAN}/install"
    else
      echo "${SCRIPT}: install ${file}"
      echo "${file} ${TARGET}" >> "${DEBIAN}/install"
    fi
  fi
done

echo "${SCRIPT}: creating ${DEBIAN}/copyright"
cat > "${DEBIAN}/copyright" << EOF
Format: https://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
Upstream-Name: ${PACKAGE}
Source: ${HOMEPAGE}

Files: *
EOF

if [ "${COPYRIGHT}" != "" ]; then
  printf "Copyright: ${COPYRIGHT}\n" >> "${DEBIAN}/copyright"
else
  printf "Copyright: ${YEAR} ${DEBFULLNAME} <${DEBEMAIL}>\n" >> "${DEBIAN}/copyright"
fi

if [ "${LICENSE}" != "" ]; then
  printf "License: ${LICENSE}\n" >> "${DEBIAN}/copyright"
  printf "${LICENSE_TEXT}" | fold -sw 80 | sed 's/^/ /' >> "${DEBIAN}/copyright"
  printf "\n" >> "${DEBIAN}/copyright"
else 
  cat >> "${DEBIAN}/copyright" << EOF
License: GPL-3+
 This file is part of ${PACKAGE}
 ${PACKAGE} is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License,
 or any later version.
 .
 ${PACKAGE} is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 .
 The following additional terms are in effect as per Section 7 of the license:
 .
 The preservation of all legal notices and author attributions in
 the material or in the Appropriate Legal Notices displayed
 by works containing it is required.
 .
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
EOF
fi

cat >> "${DEBIAN}/copyright" << EOF

Files: debian/*
Copyright: ${YEAR} ${DEBFULLNAME} <${DEBEMAIL}>
License: GPL-2+
 This package is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.
 .
 This package is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 .
 You should have received a copy of the GNU General Public License
 along with this program. If not, see <https://www.gnu.org/licenses/>
 .
 On Debian systems, the complete text of the GNU General
 Public License version 2 can be found in "/usr/share/common-licenses/GPL-2".
EOF

if [ -f "${DIR}/.debmake.postinst" ]; then
    cp "${DIR}/.debmake.postinst" "${DEBIAN}/${PACKAGE}.postinst"
    chmod +x "${DEBIAN}/${PACKAGE}.postinst"
fi

echo "${SCRIPT}: building package"

cd "${DIR}"
debuild
cd ..
